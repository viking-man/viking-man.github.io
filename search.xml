<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>我若</title>
      <link href="/2018/08/05/%E6%88%91%E8%8B%A5/"/>
      <url>/2018/08/05/%E6%88%91%E8%8B%A5/</url>
      <content type="html"><![CDATA[<p>我若为魔</p><p>世间为地狱</p><p>罪罚假恶丑</p><p>百鬼屠血河</p><p>我若为佛</p><p>世间为极乐</p><p>一念一刹那</p><p>尽是阿弥陀</p><p>我若为神</p><p>世间为天国</p><p>无苦无玄难</p><p>开口即经哲</p><p>我若为歌</p><p>世间为腔膜</p><p>宫商角徵羽</p><p>共奏绕梁乐</p><p>我若为人</p><p>世间为我所</p><p>酸甜苦辣咸</p><p>嗔怒情欲火</p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我愿</title>
      <link href="/2018/08/05/%E6%88%91%E6%84%BF/"/>
      <url>/2018/08/05/%E6%88%91%E6%84%BF/</url>
      <content type="html"><![CDATA[<p>我愿人间四月天</p><p>阳春化白雪</p><p>滋润万物衍</p><p>我愿天上即人间</p><p>星陈似眉眼</p><p>脉脉温情传</p><p>我愿地狱即人间</p><p>岩浆催烈火</p><p>灼尽罪与烦</p><p>我愿极乐即人间</p><p>终日诵经佛</p><p>何如家长短</p><p>我愿天堂即人间</p><p>圣环耀人眼</p><p>何如烟火暖</p><p>我愿天园即人间</p><p>安拉遂人愿</p><p>应念情与缘</p><p>我愿世界即人间</p><p>情欲就五谷</p><p>尝尽苦与难</p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>梦境层次与灵感与现实</title>
      <link href="/2018/08/05/%E6%A2%A6%E5%A2%83%E5%B1%82%E6%AC%A1%E4%B8%8E%E7%81%B5%E6%84%9F%E4%B8%8E%E7%8E%B0%E5%AE%9E/"/>
      <url>/2018/08/05/%E6%A2%A6%E5%A2%83%E5%B1%82%E6%AC%A1%E4%B8%8E%E7%81%B5%E6%84%9F%E4%B8%8E%E7%8E%B0%E5%AE%9E/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>刘前进重生记</title>
      <link href="/2018/08/05/%E5%88%98%E5%89%8D%E8%BF%9B%E9%87%8D%E7%94%9F%E8%AE%B0/"/>
      <url>/2018/08/05/%E5%88%98%E5%89%8D%E8%BF%9B%E9%87%8D%E7%94%9F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>​    有些人觉得自己是天才，虽然看起脸来普普通通，做起事来普普通通，连睡起觉来都普普通通，但他就是觉得自己不一样。刘前进不这样觉得，刘前进觉得自己是个傻逼。</p><p>​    刘前进是个傻逼。但是你要问傻逼是什么？刘前进自己也答不出来，不过缩写是SB，你要非得翻译成英文，那就是stupid pussy。想到这里，刘前进有点明白了。说你傻逼，其实是说你是从stupid pussy里生出来的，天生就带着蠢。妈的，这可有点狠。中国人可是信奉“江山易改，本性难移”这种屁话的，说你傻逼不就是说你蠢得无可救药。刘前进觉得自己不是个傻逼。</p><p>​    刘前进不是个傻逼，但是刘前进死了，在一个灿烂星陈的夜里。</p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>恶鬼道</title>
      <link href="/2018/08/05/%E6%81%B6%E9%AC%BC%E9%81%93/"/>
      <url>/2018/08/05/%E6%81%B6%E9%AC%BC%E9%81%93/</url>
      <content type="html"><![CDATA[<p>谁道乾坤朗朗，</p><p>满目魑魅魍魉。</p><p>扒皮抽筋吃肉，</p><p>勤恳耕耘喂翔。</p><p>杀人放火享福，</p><p>修桥补路无骨。</p><p>误认人间失格，</p><p>却是罪罚地狱。</p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>群体组织与原子化</title>
      <link href="/2018/07/28/%E7%BE%A4%E4%BD%93%E7%BB%84%E7%BB%87%E4%B8%8E%E5%8E%9F%E5%AD%90%E5%8C%96/"/>
      <url>/2018/07/28/%E7%BE%A4%E4%BD%93%E7%BB%84%E7%BB%87%E4%B8%8E%E5%8E%9F%E5%AD%90%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>​    专制政府致力于将群体原子化，极力避免群体组织活动与组织意识，并通过污名化、非法化群体组织来打击、分解、驱散。</p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>说谎的男孩</title>
      <link href="/2018/07/22/%E8%AF%B4%E8%B0%8E%E7%9A%84%E7%94%B7%E5%AD%A9/"/>
      <url>/2018/07/22/%E8%AF%B4%E8%B0%8E%E7%9A%84%E7%94%B7%E5%AD%A9/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>牧羊人</title>
      <link href="/2018/07/18/%E7%89%A7%E7%BE%8A%E4%BA%BA/"/>
      <url>/2018/07/18/%E7%89%A7%E7%BE%8A%E4%BA%BA/</url>
      <content type="html"><![CDATA[<p>​    世界上本没有规则，生物的本能只是生存与生殖。生存是体现个体的存在，生殖是种群存在的途径。</p><p>​    </p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文明的战争</title>
      <link href="/2018/07/17/%E6%96%87%E6%98%8E%E7%9A%84%E6%88%98%E4%BA%89/"/>
      <url>/2018/07/17/%E6%96%87%E6%98%8E%E7%9A%84%E6%88%98%E4%BA%89/</url>
      <content type="html"><![CDATA[<center><br><br>资本<br><br>来到人间<br><br>从头到脚每一个毛孔都带着血和肮脏的东西<br><br><br><br>犹太<br><br>资本的挥舞者<br><br>以资本屠戮其他文明<br><br><br><br>文明的战争<br><br>总是不声不响<br><br>却也是惨烈恐怖<br><br><br><br>文明的攻击方<br><br>通过传媒、书本、声音<br><br>发起一波波凌厉攻势<br><br>起初，你不在意<br><br>就像癌症初期<br><br>癌细胞还未开始扩散<br><br>你在享受资本带来的便利的同时<br><br>却未发现自身免疫力的下降<br><br>更没发现享受的便利是要偿还的<br><br><br><br>未完。<br><br></center>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理想世界</title>
      <link href="/2018/07/17/%E7%90%86%E6%83%B3%E4%B8%96%E7%95%8C/"/>
      <url>/2018/07/17/%E7%90%86%E6%83%B3%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<center><br><br>社会、社会<br><br>人性与兽性的混杂、结合<br><br>人生、人生<br><br>理想与现实的交融、妥协<br><br><br><br>达尔文主义的零和博弈<br><br>生存的压力<br><br>生殖的欲望<br><br>构成一幕慕人间悲喜剧<br><br><br><br>精神世界的洗礼<br><br>意识形态的对立<br><br>文化的倾轧<br><br>演奏出错乱的狂想曲<br><br><br><br>我的理想世界<br><br>你在哪？<br><br>人人为我<br><br>我为人人<br><br>追求科学与真理<br><br>辩论分离与统一<br><br>离散着你的观点<br><br>聚合着我们的态度<br><br>相对着个体的不同<br><br>绝对着正义与公平<br><br><br><br>你问我为何而来<br><br>我答你为你而去<br><br>不识人间五谷<br><br>只因满是净土<br><br></center>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爱是什么</title>
      <link href="/2018/07/17/%E7%88%B1%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/07/17/%E7%88%B1%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<center><br><br>爱是什么<br><br>爱是低头的娇羞<br><br>爱是不舍的回眸<br><br>爱是会心的微笑<br><br>爱是无声的泪流<br><br><br><br>爱是什么<br><br>爱是三月天的杨柳<br><br>飘散到六月的絮愁<br><br>爱是月圆夜的思忧<br><br>结成十二月的寒流<br><br><br><br>爱是什么<br><br>爱是欲罢不能的莲藕<br><br>爱是肝肠寸断的裂口<br><br>爱是悔恨当初的离燕<br><br>爱是无可阻挡的激流<br><br><br><br>爱是什么<br><br>我不知道<br><br>我不知道你<br><br>我不知道我<br><br><br><br>花开堪折终须折<br><br>莫待无花空折枝<br><br>千里婵娟成眷属<br><br>蓦然回首阑珊处</center>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>super hero</title>
      <link href="/2018/07/17/super-hero/"/>
      <url>/2018/07/17/super-hero/</url>
      <content type="html"><![CDATA[<p>####Super hero</p><p>who is your super hero?</p><p>The man who hold your arms.</p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>慕雨</title>
      <link href="/2018/07/15/%E6%85%95%E9%9B%A8/"/>
      <url>/2018/07/15/%E6%85%95%E9%9B%A8/</url>
      <content type="html"><![CDATA[<center><br><br>初见<br><br>君曰慕雨<br><br>我惧狂风<br><br>再至<br><br>君曰乐游<br><br>我恐骄阳<br><br>尾声<br><br>君已远去<br><br>乐游雨中<br><br></center>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>痛苦的悠悠</title>
      <link href="/2018/07/15/%E7%97%9B%E8%8B%A6%E7%9A%84%E6%82%A0%E6%82%A0/"/>
      <url>/2018/07/15/%E7%97%9B%E8%8B%A6%E7%9A%84%E6%82%A0%E6%82%A0/</url>
      <content type="html"><![CDATA[<p>​    悠悠是个普通人，却总是有些奇思妙想。其实奇怪的想法每个人都有，大家都乐意认为自己是与众不同的那一个，悠悠也这么想。</p><p>​    悠悠喜欢问为什么？问老师：”为什么1+1=2？“ ”这不是显而易见么，一个加一个不是两个吗？“悠悠没有得到满意的答案，但也没有再继续追问，因为他也不知道自己想要什么答案。一个苹果加一个苹果是两个苹果，一只猪加一只猪是两只猪，一个人加一个人是两个人。这都是显而易见的嘛，我为什么要问呢？也许悠悠想问的是为什么我总是一个人呢。</p><p>​    </p>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>规则破坏者</title>
      <link href="/2018/07/15/%E8%A7%84%E5%88%99%E7%A0%B4%E5%9D%8F%E8%80%85/"/>
      <url>/2018/07/15/%E8%A7%84%E5%88%99%E7%A0%B4%E5%9D%8F%E8%80%85/</url>
      <content type="html"><![CDATA[<center><br><br>有的人生来带着愤怒<br><br>怒视既成的规则<br><br>痛恨现在的框架<br><br>与整个世界格格不入<br><br>就像误闯蛛网的蜻蜓<br><br>越是奋力挣脱<br><br>越是无法动弹<br><br>又像深陷沼泽的斑马<br><br>越是用力向上<br><br>越是深陷其中<br><br>多想自己是洁白的军舰鸟<br><br>振翅翱翔<br><br>不受羁绊<br><br>不受束缚<br><br>多想自己是矫健的海豚<br><br>摇鳍似箭<br><br>怒击长空<br><br>乐时腾跃水线<br><br>狂时逐涛喝浪<br><br>悲时泪随湛海<br><br>怒时持喙成剑<br><br><br><br>有的鸟每一片羽毛都闪着自由的光辉<br><br>却只能在网兜下生存<br><br>我不会逃，因为我知道我逃不掉。<br><br></center>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>类加载器</title>
      <link href="/2018/07/15/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2018/07/15/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ol><li><p>类与类加载器：对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性。</p></li><li><p>双亲委派模型</p><ol><li><p>加载器分类</p><ul><li>启动类加载器（Bootstrap Classloader），负责加载&lt;JAVA_HOME&gt;\lib目录下的并且是虚拟机识别的文件</li><li>扩展类加载器（Extension Classloader），负责加载&lt;JAVA_HOME&gt;\lib\ext目录中的文件</li><li>应用程序类加载器（Application Classloader），系统类加载器，负责加载classPath上所指定的类库</li></ul></li><li><p>父类委派机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.ucp.knownToNotExist(var1)) &#123;</span><br><span class="line">                Class var5 = <span class="keyword">this</span>.findLoadedClass(var1);</span><br><span class="line">                <span class="keyword">if</span> (var5 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (var2) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.resolveClass(var5);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> var5;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(var1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(var1, var2);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>虚拟机类加载机制</title>
      <link href="/2018/07/15/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/07/15/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h4 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h4><ol><li>概念</li></ol><blockquote><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型，这就是虚拟机的类加载机制。</p></blockquote><ol><li><p>类加载的时机</p><ul><li>加载（Loading）-&gt;验证（Verification）-&gt;准备（Preparation）-&gt;解析（Resolution）-&gt;初始化（Initialization）-&gt;使用（Using）-&gt;卸载（Unloading）</li><li>初始化场景：<ol><li>字节码指令<ul><li>new：实例化对象</li><li>getstatic：读取一个类的静态字段</li><li>putstatic：设置一个类的静态字段</li><li>invokestatic：调用一个类的静态方法</li></ul></li><li>使用java.lang.reflect包的方法对类进行反射调用的时候，若类没有进行过初始化，则需要先触发其初始化</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li><li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化这个主类。</li></ol></li></ul></li></ol><ol><li><ol><li>加载<ul><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口</li></ul></li><li>验证<ul><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ul></li><li>准备：正式为类变量分配内存并设置类变量初始值<ul><li>public static int value = 123,准备阶段过后初始值为0</li><li>public static final int value = 123,因为存在ConstantValue属性，在准备阶段被赋值为123</li></ul></li><li>解析：将符号引用解析为直接引用的过程</li><li>初始化：执行clinit方法的过程，包括类变量的赋值与静态块内部代码的执行</li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常量池</title>
      <link href="/2018/07/15/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
      <url>/2018/07/15/%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Class类文件的结构</title>
      <link href="/2018/07/10/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/"/>
      <url>/2018/07/10/Class%E7%B1%BB%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>###Class类文件的结构</p><blockquote><p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，只有两种数据类型：无符号数和表。</p></blockquote>]]></content>
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>love</title>
      <link href="/2018/07/10/love/"/>
      <url>/2018/07/10/love/</url>
      <content type="html"><![CDATA[<blockquote><p>A sad voice has a nest among ruins of years,it sings to me in the night:”I loved you”.</p></blockquote><blockquote><p>Although for my little lamp unlit in my house, I has stars in the sky.</p></blockquote><blockquote><p>The sadness of my soul is her bride’s veil,it waits to be lifed in the night.</p></blockquote>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内存分配与回收策略</title>
      <link href="/2018/07/08/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/"/>
      <url>/2018/07/08/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</url>
      <content type="html"><![CDATA[<h4 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h4><ol><li>对象优先在Eden分配</li><li>大对象直接进入老年代<ul><li>-XX:PretenureSizeThreshold大于这个设置值的对象直接在老年代分配，此参数支队Serial和ParNew两款收集器有效</li></ul></li><li>长期存活的对象经进入老年代<ul><li>-XX:MaxTenuringThreshold经历多少次MinorGC进入老年代</li></ul></li><li>动态对象年龄判定</li><li>空间分配担保</li></ol>]]></content>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>垃圾回收器</title>
      <link href="/2018/07/08/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
      <url>/2018/07/08/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><blockquote><p>Serial收集器</p></blockquote><ol><li>概念：单线程收集器，在进行垃圾收集时会暂停其他所有的工作线程，直到收集结束。</li><li>优点：简单高效</li><li>适用区域：新生代</li></ol><blockquote><p>ParNew收集器</p></blockquote><ol><li>概念：Serial收集器的多线程版本</li><li>可用参数：<ul><li>-XX:SurvivorRatio</li><li>-XX:PretenureSizeThreshold</li><li>-XX:HandlePromotionFailure</li></ul></li><li>适用：新生代收集器，只能与CMS收集器配合适用</li></ol><blockquote><p>Parallel Scavenge收集器</p></blockquote><ol><li>概念：使用复制算法并行的多线程收集器</li><li>特点：关注于达到一个可控制的吞吐量，吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）</li><li>可用参数：<ul><li>-XX:GCTimeRatio</li><li>-XX:MaxGCPauseMillis</li><li>-XX:UseAdaptiveSizePolicy</li></ul></li><li>适用：新生代</li></ol><blockquote><p>Serial Old收集器</p></blockquote><ol><li>概念：使用<strong>标记-整理</strong>算法的单线程收集器</li><li>用途：<ul><li>与Parallel Scavenge配合适用</li><li>作为CMS收集器的后备预案</li></ul></li><li>适用：老年代</li></ol><blockquote><p>Parallel Old收集器</p></blockquote><ol><li>Parallel Scavenge收集器的老年代版本，使用多线程和<strong>标记-整理</strong>算法。</li><li>适用：在注重吞吐量及CPU资源敏感的场合，优先考虑Parallel Scavenge加Parallel Old收集器。</li></ol><blockquote><p>CMS收集器</p></blockquote><ol><li>概念：一种以获取最短回收停顿时间为目标的收集器，使用<strong>标记-清除</strong>算法</li><li>收集过程：<ul><li>初始标记：Stop the World,标记GC Roots能直接关联到的对象</li><li>并发标记：GC Roots Tracing</li><li>重新标记：修正并发标记阶段产生变化的标记记录</li><li>并发清除</li></ul></li><li>缺点：<ul><li>对CPU资源敏感</li><li>无法处理浮动垃圾</li><li>产生大量的空间碎片</li></ul></li><li>可用参数：<ul><li>-XX:UseCMSCompactAtFullCollection</li><li>-XX:CMSFullGCsBeforeCompaction</li></ul></li></ol><blockquote><p>G1收集器</p></blockquote><p>未完待续。</p>]]></content>
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>垃圾判断算法</title>
      <link href="/2018/07/08/%E5%9E%83%E5%9C%BE%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95/"/>
      <url>/2018/07/08/%E5%9E%83%E5%9C%BE%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="垃圾判断算法"><a href="#垃圾判断算法" class="headerlink" title="垃圾判断算法"></a>垃圾判断算法</h4><blockquote><h5 id="引用计算法"><a href="#引用计算法" class="headerlink" title="引用计算法"></a>引用计算法</h5></blockquote><ol><li>概念：给对象添加一个引用计算器，每当有一个地方引用它时，计算器就加1；当引用失效时，计算器值就减1；当计数器值为0时视为失效。</li><li>缺陷：很难解决对象之间的相互循环引用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bigSize = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ReferenceCountingGC referenceCountingGC_A = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        ReferenceCountingGC referenceCountingGC_B = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line"></span><br><span class="line">        referenceCountingGC_A.instance = referenceCountingGC_B;</span><br><span class="line">        referenceCountingGC_B.instance = referenceCountingGC_A;</span><br><span class="line"></span><br><span class="line">        referenceCountingGC_A = <span class="keyword">null</span>;</span><br><span class="line">        referenceCountingGC_B = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReferenceCountingGC referenceCountingGC = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        referenceCountingGC.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CommandLine flags: -XX:InitialHeapSize=<span class="number">134217728</span> -XX:MaxHeapSize=<span class="number">2147483648</span> -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC </span><br><span class="line"><span class="number">0</span><span class="variable">.269</span>: [GC (System<span class="variable">.gc</span>()) [PSYoungGen: <span class="number">9519</span>K-&gt;<span class="number">2880</span>K(<span class="number">38400</span>K)] <span class="number">9519</span>K-&gt;<span class="number">2888</span>K(<span class="number">125952</span>K), <span class="number">0</span><span class="variable">.0028893</span> secs] [Times: user=<span class="number">0</span><span class="variable">.00</span> sys=<span class="number">0</span><span class="variable">.00</span>, <span class="keyword">real</span>=<span class="number">0</span><span class="variable">.00</span> secs] </span><br><span class="line"><span class="number">0</span><span class="variable">.272</span>: [Full GC (System<span class="variable">.gc</span>()) [PSYoungGen: <span class="number">2880</span>K-&gt;<span class="number">0</span>K(<span class="number">38400</span>K)] [ParOldGen: <span class="number">8</span>K-&gt;<span class="number">2766</span>K(<span class="number">87552</span>K)] <span class="number">2888</span>K-&gt;<span class="number">2766</span>K(<span class="number">125952</span>K), [Metaspace: <span class="number">3310</span>K-&gt;<span class="number">3310</span>K(<span class="number">1056768</span>K)], <span class="number">0</span><span class="variable">.0043064</span> secs] [Times: user=<span class="number">0</span><span class="variable">.01</span> sys=<span class="number">0</span><span class="variable">.00</span>, <span class="keyword">real</span>=<span class="number">0</span><span class="variable">.01</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">38400</span>K, used <span class="number">333</span>K [<span class="number">0</span>x0000000795580000, <span class="number">0</span>x0000000798000000, <span class="number">0</span>x00000007c0000000)</span><br><span class="line">  eden space <span class="number">33280</span>K, <span class="number">1</span>% used [<span class="number">0</span>x0000000795580000,<span class="number">0</span>x00000007955d34a8,<span class="number">0</span>x0000000797600000)</span><br><span class="line">  from space <span class="number">5120</span>K, <span class="number">0</span>% used [<span class="number">0</span>x0000000797600000,<span class="number">0</span>x0000000797600000,<span class="number">0</span>x0000000797b00000)</span><br><span class="line">  to   space <span class="number">5120</span>K, <span class="number">0</span>% used [<span class="number">0</span>x0000000797b00000,<span class="number">0</span>x0000000797b00000,<span class="number">0</span>x0000000798000000)</span><br><span class="line"> ParOldGen       total <span class="number">87552</span>K, used <span class="number">2766</span>K [<span class="number">0</span>x0000000740000000, <span class="number">0</span>x0000000745580000, <span class="number">0</span>x0000000795580000)</span><br><span class="line">  object space <span class="number">87552</span>K, <span class="number">3</span>% used [<span class="number">0</span>x0000000740000000,<span class="number">0</span>x00000007402b3890,<span class="number">0</span>x0000000745580000)</span><br><span class="line"> Metaspace       used <span class="number">3318</span>K, capacity <span class="number">4496</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="keyword">class</span> space    used <span class="number">365</span>K, capacity <span class="number">388</span>K, committed <span class="number">512</span>K, reserved <span class="number">1048576</span>K</span><br></pre></td></tr></table></figure><p>从GC日志看，对象由PSYoungGen转移至ParOldGen中。</p><blockquote><h5 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h5></blockquote><ol><li>概念：通过一系列名为<em><strong>GC Roots</strong></em>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到<em><strong>GC Roots</strong></em>没有任何引用链相连时，则此对象视为不可用。</li><li>可被视为<em><strong>GC Roots</strong></em>的对象<ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中的类<strong>静态属性</strong>引用的对象</li><li>方法区中的<strong>常量</strong>引用的对象</li><li>本地方法栈中Native方法引用的对象</li></ul></li></ol><blockquote><p>引用分级</p></blockquote><ul><li>强引用（Strong Reference）：永远不会回收</li><li>软引用（Soft Reference）：在内存溢出前回收</li><li>弱引用（Weak Reference）：垃圾收集时回收</li><li>虚引用（Phantom Reference）：无影响，用于系统通知</li></ul>]]></content>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>垃圾收集算法</title>
      <link href="/2018/07/08/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
      <url>/2018/07/08/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h4><blockquote><p>标记-清除算法</p></blockquote><ol><li>概念：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。</li><li>缺点：<ul><li>效率问题：标记和清除过程的效率都不高</li><li>空间问题：标记清除后会产生不连续内存碎片，当有对象需要分配时可能会导致非必要垃圾收集。</li></ul></li></ol><blockquote><p>复制算法</p></blockquote><ol><li>概念：将可用内存按容量分成大小相同两块，当其中一块内存用完了，就将存活着的对象复制到另一块上面，再清理已经用完的内存空间。</li><li>优点：无内存碎片，运行高效</li><li>缺点：将可用内存缩减为原内存一半</li><li>改进：在回收新生代时，设置一块Eden区和两块Survivor区，每次使用Eden和其中一块Survivor，回收时将存活的对象拷贝到另一块Survivor上，当Survivor区不够时，需要依赖其他内存（老年代）进行分配担保。Hotspot默认Eden:Survivor=8:1</li></ol><blockquote><p>标记-整理算法</p></blockquote><p>​    标记整理算法与标记—&gt;清除算法的不同在于增加一步整理的过程：标记—&gt;整理—&gt;清除</p><blockquote><p>分代收集算法</p></blockquote><ol><li>概念：根据对象的存活周期的不同将内存划分为几块。</li><li>分代：一般分为年轻代，老年代，永久代，对不同的分区采用不同的垃圾回收算法，提高效率</li></ol>]]></content>
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning,programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++学习</title>
      <link href="/2018/06/23/C-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/06/23/C-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    为了研究一下bitcoin的原理，为自己用java实现区块链作准备。</p><h3 id="C-语法"><a href="#C-语法" class="headerlink" title="C++语法"></a>C++语法</h3>]]></content>
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于对机器学习的思考</title>
      <link href="/2018/06/23/%E5%85%B3%E4%BA%8E%E5%AF%B9%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/06/23/%E5%85%B3%E4%BA%8E%E5%AF%B9%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>机器学习可以创造未来，拥抱变化吧。</p><img src="/2018/06/23/关于对机器学习的思考/brain.jpeg" title="brain"><a id="more"></a><p>科技的进步具有一定的偶然性。因为载体是人，每个人的生长环境不同，环境感知与经验积累不同，这些构成不同的人。而世界万物的内在规律也各有不同，发现内在规律的过程其实是一个不断试错的过程，而某些人可能对某种领域具有较强的感知能力。这是由人的不同经验积累所沉淀形成的，这也是机器学习可以代替的部分。所有可以通过重复不同子元素试错而得到的内在规律都可以由机器学习替代，人类所需要做的是提出创造性思维与想法。甚至机器学习进一步可以自己形成创造性思维并自我验证。</p><p>这是更深一层的假设，目前的深度学习可以形成的是通过某一应用细分支数据堆叠，形成这一分支的“应答器”，还需要做两方面的工作。一方面需要建立多个分支的“应答器”，这是一个平行积累量变的问题，需要各个细分领域的专家参与。另一方面需要将多个细分领域的“应答器”结果起来，通过加权的方式统筹结果，形成更大领域的“应答器”。</p><p>重复上述工作，直到可以进行某一课题的研究，一旦进行到这一步，将是机器学习推动技术爆炸的时候。以后的工作只剩理论的进步，重复性科研试错以及平行探索都不再需要投入太大的经历。只需要在高度上的提高。</p><p>再进一步，可以通过堆叠不同环境参数形成不同侧重点的“应答器”，模拟不同人对相同境遇的不同反应，并建立相关课题的模拟环境与结构，尝试机器学习在理论上的自我创造。</p>]]></content>
      
      <categories>
          
          <category> thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
